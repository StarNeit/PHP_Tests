<?php

namespace Tests\Integration\Http\Controllers\InternalApi;

use MotionArray\Models\User;
use Tests\Support\RefreshAndSeedDatabase;
use Tests\TestCase;

class UsersControllerTest extends TestCase
{
    use RefreshAndSeedDatabase;

    public function test_become_producer_should_fail_if_fields_are_missing()
    {
        $request = $this->json('POST','/api/producers/producer-upgrade');
        $request->assertStatus(422); //should be 401

        $user = factory(User::class)->create();

        $request = $this->actingAs($user)
            ->json('POST','/api/producers/producer-upgrade');
        $request->assertStatus(422);
        $request->assertJsonValidationErrors([
            'terms',
            'company_name',
        ]);
    }

    public function test_become_producer_should_success_with_correct_fields()
    {
        $user = factory(User::class)->create();
        $this->assertNull($user->customer_name);
        $request = $this->actingAs($user)
            ->json('POST','/api/producers/producer-upgrade', [
                'company_name' => 'xyz111',
                'terms' => true,
            ]);

        $user->refresh();
        $this->assertEquals('xyz111', $user->company_name);
        $this->assertEquals('xyz111', $user->slug);

        $request->assertRedirect(url('/account/submissions'));

        //can't submit because company name has been taken already
        $request = $this->actingAs($user)
            ->json('POST','/api/producers/producer-upgrade', [
                'company_name' => 'xyz111',
                'terms' => true,
            ]);
        $request->assertJsonValidationErrors([
            'company_name',
        ]);
    }

    /**
     * Slug is generated by company_name.
     *
     * slug(xyz111) === slug(xyz-111)
     *
     * If this happens, we should return 422.
     */
    public function test_become_producer_should_fail_if_slug_is_in_use()
    {
        $user = factory(User::class)->create([
            'company_name' => 'xyz111',
            'slug' => 'xyz111',
        ]);

        $user2 = factory(User::class)->create();
        $this->assertNull($user2->slug);
        $request = $this->actingAs($user2)
            ->json('POST','/api/producers/producer-upgrade', [
                'company_name' => 'xyz-111',
                'terms' => true,
            ]);
        $request->assertJsonValidationErrors([
            'company_name',
        ]);
    }
}
